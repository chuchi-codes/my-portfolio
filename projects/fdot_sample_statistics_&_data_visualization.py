# -*- coding: utf-8 -*-
"""FDOT Sample Statistics & Data Visualization.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/125lJure6R2NioEXxk5R7GkJqdydksrsK

## Dataset Description & Info

Our dataset includes a sample of over 40,000 crashes in Tri-County Florida (Miami-Dade, Broward, Palm Beach) for the year 2020. It has over 150 columns (or fields) that provide us the data from each crash report. Many of the columns have coded data which means each number represents a distinct category, you can find the full list of fields and their codes here: [Fields & Codes](https://gis.fdot.gov/ssogis/docs/MapCodeTableDefinitions.xlsx)

How to access dataset file:
- Download the CSV file from canvas [here](https://canvas.fau.edu/files/32090294/download?download_frd=1).
- Raw CSV data link [here](https://raw.githubusercontent.com/cam-alvarez/Personal-Portfolio-and-Blog/main/public/2020-tristatecounty-crashdata.csv).

Instructions on how to load dataset via either of these two methods are in the next section.

## Load Dataset and Libraries
"""

# Import necessary libraries
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns

"""### Loading Raw CSV Data from Link"""

# URL to the CSV file
url = 'https://raw.githubusercontent.com/cam-alvarez/Personal-Portfolio-and-Blog/main/public/2020-tristatecounty-crashdata.csv'

# Read the CSV file from the URL
df2 = pd.read_csv(url)

# Fixing warning by reloading our dataset with low_memory parameter set to false
df2 = pd.read_csv('https://raw.githubusercontent.com/cam-alvarez/Personal-Portfolio-and-Blog/main/public/2020-tristatecounty-crashdata.csv', low_memory=False)

# Checking upload by displaying the first few rows of the dataframe
print(df2.head())

print(df2.columns)

len(df2.columns)

column_names = list(df2.columns.values)
print(column_names)

"""# Question 1

To start our investigation of this dataset, it would be useful to know some basic numbers on the frequency of crashes on the overall dataset and between counties. Doing so may point towards certain trends we might want to investigate further. We will start by creating histograms of the number of crashes per month over our entire dataset and then by county. We will then calculate some sample statistics on the number of crashes per month. Afterward, we will summarize our findings.

```
Fields:
  - Month (MONTH)
  - County (COUNTY_TXT)
```

1(a): Histogram of overall number of crashes per month

1(b): Calculate the mean, median, quartiles, and standard deviation for the number of crashes per month of the overall dataset.

1(c): Histograms of overall number of crashes per month by county.

1(d): Calculate the mean, median, quartiles, and standard deviation for the number of crashes per month for each county.

1(e): Report your findings and conclusions based on the histograms and calculated sample statistics.

## Answers & Code

### 1(a): Histogram of overall number of crashes per month
"""

import pandas as pd
import matplotlib.pyplot as plt

# Assuming your DataFrame is named df
# Convert CRASH_DATE to datetime
df2['CRASH_DATE'] = pd.to_datetime(df2['CRASH_DATE'])

# Create a new column for the month
df2['Month'] = df2['CRASH_DATE'].dt.month

# Group by month and count the number of crashes
monthly_crashes = df2.groupby('Month')['CRASH_NUMBER'].count()

# Create a histogram
plt.bar(monthly_crashes.index, monthly_crashes, color='skyblue', edgecolor='black')

# Add labels and title
plt.xlabel('Month')
plt.ylabel('Number of Crashes')
plt.title('Number of Crashes per Month')

# Customize x-axis ticks (optional)
plt.xticks(monthly_crashes.index, ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'])

# Show the plot
plt.show()

"""### 1(b): Sample statistics on the overall dataset

smaple stats for crashes per month
"""

# Print out the number of crashes per month
for month, count in monthly_crashes.items():
    print(f"Month {month}: {count} crashes")

import pandas as pd

# Assuming your DataFrame is named df
# Convert CRASH_DATE to datetime
df2['CRASH_DATE'] = pd.to_datetime(df2['CRASH_DATE'])

# Create a new column for the month
df2['Month'] = df2['CRASH_DATE'].dt.month

# Group by month and count the number of crashes
monthly_crashes = df2.groupby('Month')['CRASH_NUMBER'].count()

# Print out the number of crashes per month of eniter df
for month, count in monthly_crashes.items():
    print(f"Month {month}: {count} crashes")

# Perform basic sample statistics on the DataFrame of only crashes per month
statistics = monthly_crashes.describe()

# Display the summary statistics
print(statistics)

"""### 1(c): Histograms of overall number of crashes per month by county."""

print(df2['COUNTY_TXT'].unique())

"""1(c.1): Histogram for Miami-Dade County."""

import pandas as pd
import matplotlib.pyplot as plt

# Assuming your DataFrame is named df2
df2['CRASH_DATE'] = pd.to_datetime(df2['CRASH_DATE'])
df2['Month'] = df2['CRASH_DATE'].dt.month

# Filter data for Miami-Dade County
miami_dade_data = df2[df2['COUNTY_TXT'] == 'MIAMI-DADE']

# Group by month and count the number of crashes for Miami-Dade County
monthly_crashes_miami_dade = miami_dade_data.groupby('Month')['CRASH_NUMBER'].count().reindex(index=range(1, 13))

# Create a histogram
plt.figure(figsize=(10, 6))
plt.bar(monthly_crashes_miami_dade.index, monthly_crashes_miami_dade, color='skyblue', edgecolor='black')

# Add labels and title
plt.xlabel('Month')
plt.ylabel('Number of Crashes')
plt.title('Number of Crashes per Month in Miami-Dade County')

# Customize x-axis ticks
plt.xticks(monthly_crashes_miami_dade.index, ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'])

# Show the plot
plt.show()

"""1(c.2): Histogram for Broward County."""

import pandas as pd
import matplotlib.pyplot as plt

# Assuming your DataFrame is named df2
df2['CRASH_DATE'] = pd.to_datetime(df2['CRASH_DATE'])
df2['Month'] = df2['CRASH_DATE'].dt.month

# Filter data for Miami-Dade County
broward_data = df2[df2['COUNTY_TXT'] == 'BROWARD']

# Group by month and count the number of crashes for Miami-Dade County
monthly_crashes_broward = broward_data.groupby('Month')['CRASH_NUMBER'].count().reindex(index=range(1, 13))

# Create a histogram
plt.figure(figsize=(10, 6))
plt.bar(monthly_crashes_broward.index, monthly_crashes_broward, color='skyblue', edgecolor='black')

# Add labels and title
plt.xlabel('Month')
plt.ylabel('Number of Crashes')
plt.title('Number of Crashes per Month in broward County')

# Customize x-axis ticks
plt.xticks(monthly_crashes_broward.index, ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'])

# Show the plot
plt.show()

"""1(c.3): Histogram for Palm Beach County."""

import pandas as pd
import matplotlib.pyplot as plt

# Assuming your DataFrame is named df2
df2['CRASH_DATE'] = pd.to_datetime(df2['CRASH_DATE'])
df2['Month'] = df2['CRASH_DATE'].dt.month

palm_beach_data = df2[df2['COUNTY_TXT'] == 'PALM BEACH']

# Group by month and count the number of crashes for Miami-Dade County
monthly_crashes_palm_beach = palm_beach_data.groupby('Month')['CRASH_NUMBER'].count().reindex(index=range(1, 13))

# Create a histogram
plt.figure(figsize=(10, 6))
plt.bar(monthly_crashes_palm_beach.index, monthly_crashes_palm_beach, color='skyblue', edgecolor='black')

# Add labels and title
plt.xlabel('Month')
plt.ylabel('Number of Crashes')
plt.title('Number of Crashes per Month in palm_beach County')

# Customize x-axis ticks
plt.xticks(monthly_crashes_palm_beach.index, ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'])

# Show the plot
plt.show()

"""### 1(d): Sample statistics by county

1(d.1): Sample statistics for Miami-Dade County:
"""

# Perform basic sample statistics on the DataFrame of only crashes per month
statistics = monthly_crashes_miami_dade.describe()
print(statistics)

"""1(d.2): Sample statistics for Broward County:"""

# Perform basic sample statistics on the DataFrame of only crashes per month
statistics = monthly_crashes_broward.describe()
print(statistics)

"""1(d.3): Sample statistics for Palm Beach County:"""

# Perform basic sample statistics on the DataFrame of only crashes per month
statistics = monthly_crashes_palm_beach.describe()
print(statistics)

"""### 1(e): Findings"""



"""Miami-Dade has the highest mean number of monthly crashes being , then Broward  and then in last is Palmbeach.The maximum crash numbers are also highest in Miami-Dade 4452, showing that it experiences occasional months with a significantly higher number of crashes compared to the other counties.

# Question 2

Our dataset also includes fields for injury severity level, speeding indication, and an aggressive driving indicator.

For this question we are going to investigate the relationship between the factors of whether somebody was speeding, driving agressively, or neither and the injury severity level for those crashes. To investigate and report our findings we will create a scatterplot comparing the crashes where drivers were speeding, where agressive driving was involved, and where neither were involved.We will then calculate sample statistics of the number of seriosuly injured people for each of the three factors.

> Note: We will have to check the [Fields & Codes](https://gis.fdot.gov/ssogis/docs/MapCodeTableDefinitions.xlsx) file to check what our numbers in the injury severity column correspond to.

```
Fields:
  - Injury Severity Level (INJSEVER)
  - Speeding Indicator (SPEEDING_IND)
  - Agressive Driving Indicator (AGGRESSIVE_DRIVING_IND)
  - Speeding or Agressive Driving Indicator (SPEEDING_AGGRESSIVE_IND)
  - Number of Seriously Injured (NUMBER_OF_SERIOUS_INJURIES)
```
2(a): Create a scatterplot that compares injury severity levels for the three crash factors: speeding involved, aggressive driving involved, no speeding or agressive driving involved. (All three factors should be represented on the same scatterplot)

2(b): Calculate the mean, median, mode, and range for each of the three factors.

2(c): Report your findings based on the scatterplot. How do these factors appear to affect the injury severity level of the crashes? Are these findings supported by your sample statistics?

## Answers & Code

### 2(a): Scatterplot for injury severity and related factors

Since the "injury severity level" is a categorical variable and not a continuous one, a scatterplot would be inappropriate to use here. It is much better to use a line chart or a bar chart.
"""

unique_values = df2['INJSEVER'].unique()

print(unique_values)

unique_values = df2['SPEEDING_IND'].unique()

print(unique_values)

unique_values = df2['AGGRESSIVE_DRIVING_IND'].unique()

print(unique_values)

unique_values = df2['SPEEDING_AGGRESSIVE_IND'].unique()

print(unique_values)

unique_values = df2['NUMBER_OF_SERIOUS_INJURIES'].unique()

print(unique_values)

import matplotlib.pyplot as plt

# Sample data
crash_factors = ["SPEEDING_IND", "AGGRESSIVE_DRIVING_IND", "SPEEDING_AGGRESSIVE_IND"]
injury_severity = [1, 2, 3]  # Example severity levels (replace with your actual data)

# Check if the lengths match
if len(crash_factors) != len(injury_severity):
    raise ValueError("Crash factors and injury severity must have the same length")

# Create bar graph
plt.bar(crash_factors, injury_severity, color='blue')

# Add labels and title
plt.xlabel('Crash Factors')
plt.ylabel('Injury Severity Levels')
plt.title('Bar Graph of Crash Factors and Injury Severity')

# Display the plot
plt.show()



"""### 2(b): Sample statistics for each group

2(b.1): Sample statistics for the number of seriously injured where speeding was involved.
"""

import pandas as pd

# Filter the DataFrame where SPEEDING_IND is true
speeding_data = df2[df2['SPEEDING_IND'] == 'Y']['NUMBER_OF_SERIOUS_INJURIES']

# Calculate sample statistics
statistics = speeding_data.describe()

# Display the results
print(statistics)

"""dunno"""

seriously_injured_data = df2['NUMBER_OF_SERIOUS_INJURIES']

# Calculate sample statistics
statistics = seriously_injured_data.describe()

# Display the results
print(statistics)

"""2(b.2): Sample statistics for the number of serious injuries where aggressive driving was involved."""

import pandas as pd

# Filter the DataFrame where SPEEDING_IND is true
speeding_data = df2[df2['AGGRESSIVE_DRIVING_IND'] == 'Y']['NUMBER_OF_SERIOUS_INJURIES']

# Calculate sample statistics
statistics = speeding_data.describe()

# Display the results
print(statistics)

"""2(b.3): Sample statistics for the number of seriously injured where neither speeding nor aggressive driving was involved."""

import pandas as pd

# Filter the DataFrame where SPEEDING_IND is true
# speeding nor aggressive driving
no_speeding_aggressive_data = df2[(df2['SPEEDING_IND'] == 'N') & (df2['AGGRESSIVE_DRIVING_IND'] == 'N')]['NUMBER_OF_SERIOUS_INJURIES']


# Calculate sample statistics
statistics = no_speeding_aggressive_data.describe()

# Display the results
print(statistics)

"""### 2(c): Findings

When there is aressgive driving or speeding indicated there is a higher rate of crashes.

# Extra Credit

In the previous question, we investigated the differences between the sample statistics of the number of seriously injured in crashes where speeding, aggressive driving, or neither were involved. In this extra credit question, we will investigate three more factors using sample statistics and box plots.

```
Factors:
  - Number of Seriously Injured (NUMBER_OF_SERIOUS_INJURIES)
  - Seatbelt Indicator (NO_BELT_IND)
  - Impaired Driver Indicator (IMPAIRED_DRIVER_IND)
  - Distracted Driver Indicator (DISTRACTED_DRIVER_IND)
```

1. Calculate the five-point summaries for the number of serious injuries per each designation (Y/N) in the groups.

  (a) Seatbelt Indicator

  (b) Impaired Driver Indicator

  (c) Distracted Driver Indicator

2. Make side-by-side boxplots comparing the sample statistics of each designation (Y/N) in the groups.

  (a) Seatbelt Indicator

  (b) Impaired Driver Indicator
  
  (c) Distracted Driver Indicator

3. State your findings on whether the designations indicate any change in the number of seriosuly injured in each group.

  (a) Seatbelt Indicator

  (b) Impaired Driver Indicator
  
  (c) Distracted Driver Indicator

## Answers & Code

### **Seatbelt Indicator**

#### 1(a): Seatbelt indicator five-point summaries


---

1(a.1): Seatbelt designation - Yes

1(a.2): Seatbelt designation - No
"""

unique_values = df2['NO_BELT_IND'].unique()

print(unique_values)

"""five-point summaries of NUMBER_OF_SERIOUS_INJURIES with NO_BELT_IND == to yes Seatbelt designation - Yes:"""

import pandas as pd

# Replace the column names with the actual names in your dataset
seatbelt_column = 'NO_BELT_IND'

# Calculate five-number summary per each designation for Seatbelt Indicator
seatbelt_summary = df2.groupby(seatbelt_column)['NUMBER_OF_SERIOUS_INJURIES'].describe(percentiles=[.25, .5, .75])

# Display the results
print(f"Five-Number Summary for Seatbelt Indicator:\n{seatbelt_summary}")



"""#### 2(a): Seatbelt indicator boxplots"""



"""#### 3(a): Findings

There are two groups, 'N' and 'Y', indicating whether or not the seatbelt was used.
The standard deviation for 'Y' is higher 0.60 compared to 'N' 0.23.
This higher standard deviation for 'Y' can suggests that there is a greater variability in the number of serious injuries when the seatbelt is used.

### **Impaired Driver Indicator**

#### 1(b): Impaired driver indicator five-point summaries


---

1(b.1): Impaired driver designation - Yes

1(b.2): Impaired driver designation - No
"""

impaired_column = 'IMPAIRED_DRIVER_IND'
# Calculate five-number summary per each designation for Impaired Driver Indicator
impaired_summary = df2.groupby(impaired_column)['NUMBER_OF_SERIOUS_INJURIES'].describe(percentiles=[.25, .5, .75])
print(f"\nFive-Number Summary for Impaired Driver Indicator:\n{impaired_summary}")



"""#### 2(b): Impaired driver indicator boxplots"""



"""#### 3(b): Findings

Similar to the Seatbelt Indicator, there are two groups, 'N' and 'Y', indicating whether or not the driver was impaired.
The standard deviation for 'Y' is higher 0.48 compared to 'N' 0.24.
This higher standard deviation for 'Y' suggests greater variability in the number of serious injuries when the driver is impaired.

### **Distracted Driver Indicator**

#### 1(c): Distracted driver indicator five-point summaries


---

1(c.1): Distracted driver driver designation - Yes

1(c.2): Distracted driver driver designation - No
"""

distracted_column = 'DISTRACTED_DRIVER_IND'
# Calculate five-number summary per each designation for Distracted Driver Indicator
distracted_summary = df2.groupby(distracted_column)['NUMBER_OF_SERIOUS_INJURIES'].describe(percentiles=[.25, .5, .75])
print(f"\nFive-Number Summary for Distracted Driver Indicator:\n{distracted_summary}")



"""#### 2(c): Distracted driver driver indicator boxplots"""



"""#### 3(c): Findings

Again, there are two groups, 'N' and 'Y', indicating whether or not the driver was distracted.
The standard deviation for 'Y' is higher 0.30 compared to 'N' 0.24.
This higher standard deviation for 'Y' suggests greater variability in the number of serious injuries when the driver is distracted.

In each case, Seatbelt Indicator ,Impaired Driver Indicator, and  Distracted Driver Indicator a higher standard deviation indicates more variability in the number of serious injuries. The presence of higher standard deviations suggests that the impact of the indicator on the number of serious injuries is more variable, and it doesn't have a consistent effect across all instances.
"""