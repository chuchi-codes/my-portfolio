# -*- coding: utf-8 -*-
"""youtubeTotalUploadedTime.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1MUzMQf6qTzUVw1pKSAuPkXDH7uR-28KS

**YouTube Data API - Quota and Compliance Audits**

*https://developers.google.com/youtube/v3/determine_quota_cost*

YOUTUBE_API_KEY = 'AIzaSyDOLo5ir-pBVwDwl_WVQVXfbwdBy72Eeqk'

**Final**
"""

from flask import Flask, render_template

app = Flask(__name__)

from googleapiclient.discovery import build

# Replace these values with your actual channel ID and API key
# CHANNEL_ID = 'UC-dHBt6yerOAPvpDBFZuRKw'

# channel id of the channel William Edward Hahn
CHANNEL_ID = 'UCb201Z9UKnZmBFHdPauAP2w'
YOUTUBE_API_KEY = 'AIzaSyDOLo5ir-pBVwDwl_WVQVXfbwdBy72Eeqk'

# Create a YouTube API client
youtube = build('youtube', 'v3', developerKey=YOUTUBE_API_KEY)

# Fetch channel details
channel_response = youtube.channels().list(
    part='statistics',
    id=CHANNEL_ID
).execute()

# Extract and print the video count
if 'items' in channel_response:
    channel_data = channel_response['items'][0]
    video_count = int(channel_data['statistics']['videoCount'])
    print(f"Video Count: {video_count}")
else:
    print("Channel not found or no data available.")

# Define the iso8601_to_seconds function
def iso8601_to_seconds(duration):
    # Parsing ISO 8601 duration format
    match = re.match(r'PT(\d+H)?(\d+M)?(\d+S)?', duration)
    hours = int(match.group(1)[:-1]) if match.group(1) else 0
    minutes = int(match.group(2)[:-1]) if match.group(2) else 0
    seconds = int(match.group(3)[:-1]) if match.group(3) else 0

    # Calculate the total duration in seconds
    total_seconds = (hours * 3600) + (minutes * 60) + seconds

    return total_seconds

# Initialize variables for total duration and pagination
total_duration_seconds = 0
next_page_token = None

while True:
    # List videos with pagination
    video_response = youtube.search().list(
        part='snippet',
        channelId=CHANNEL_ID,
        maxResults=50,  # Adjust the number of results per page as needed
        type='video',
        pageToken=next_page_token
    ).execute()

    # Iterate through the video items
    for item in video_response.get('items', []):
        # Fetch video details including duration
        video_id = item['id']['videoId']
        video_details = youtube.videos().list(
            part='contentDetails',
            id=video_id
        ).execute()

        # Extract and convert the duration to seconds
        duration_iso8601 = video_details['items'][0]['contentDetails']['duration']
        duration_seconds = iso8601_to_seconds(duration_iso8601)

        # Add the duration to the total
        total_duration_seconds += duration_seconds

        # Print video title and duration
        print(f"Video Title: {item['snippet']['title']}")
        print(f"Video Duration: {duration_iso8601}")

    # Check if there are more pages of results
    next_page_token = video_response.get('nextPageToken')
    if not next_page_token:
        break

# Calculate the total duration back to ISO 8601 format
total_duration_iso8601 = f'PT{total_duration_seconds}S'

# Convert the total duration back to hours, minutes, and seconds
total_duration_hours = total_duration_seconds // 3600
total_duration_minutes = (total_duration_seconds % 3600) // 60
total_duration_seconds = total_duration_seconds % 60

# Print the total duration in hours, minutes, and seconds
print(f"Total Duration: {total_duration_hours} hours, {total_duration_minutes} minutes, {total_duration_seconds} seconds")


# Print the total duration in ISO 8601 format
print(f"Total Duration: {total_duration_iso8601}")


# Sample data (you need to replace this with your actual data)
video_title = "Sample Video Title"
total_duration_hours = 1
total_duration_minutes = 30
total_duration_seconds = 45

@app.route('/')
def index():
    return render_template('index.html', video_title=video_title,
                           total_duration_hours=total_duration_hours,
                           total_duration_minutes=total_duration_minutes,
                           total_duration_seconds=total_duration_seconds)

if __name__ == '__main__':
    app.run(debug=True)